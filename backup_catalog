#!/bin/sh

CONFIG="${HOME}/.backup/config"
LOGDIR="${HOME}/.backup/logs/"

DATE="`date +"%Y-%m-%d"`"

BKP_EXCL='/tmp/backup_catalog.excl'

die() {
	echo "$*"
	echo "Your MASTER might be in read-only mode. Unmount and remount it to get back to normal operation."
	exit 1
}

#
# These functions should be "ported" for different OSes.
# This implementation currently only works on macOS.
#
get_volume_data() {
	DATA=""
	DIR="$1"
	# On Mac OS X, it is expected that disks are mounted on '/Volumes'.
	while [ `echo $DIR | awk 'BEGIN{FS="/"}{print NF;}'` -gt 2 ]
	do
		DATA=`df -P "$DIR" 2>/dev/null | tail -1 | sed "s/  */ /g"`
		if [ -z "${DATA}" ]
		then
			DIR="`dirname "${DIR}"`"
		else
			DIR="/Volumes"
		fi
	done
	echo "${DATA}"
}

get_mountpoint() {
	get_volume_data "$1" | cut -d" " -f6
}

get_device() {
	get_volume_data "$1" | cut -d" " -f1
}

is_readonly() {
	STR="`mount | grep "$1" | grep "read-only"`"
	test -z "${STR}" && echo "NO" || echo "YES"
}

unmount() {
	diskutil unmount "$1"
	return $?
}

mount_ro() {
	diskutil mount readOnly "$1"
	return $?
}

mount_rw() {
	diskutil mount "$1"
	return $?
}

# check directories
check_bk_dir() {
    if [ "$1" == "y" -a ! -d "$2" ]
    then
        echo "Creating primary backup directory."
        mkdir -p "$2" || echo "Can't find first backup: $2"
    fi
}

backup_if_required() {
    if [ "$1" == "y" ]
    then
        cat << EOF > "${BKP_EXCL}"
.Spotlight*/
.DocumentRevisions*/
.DS_Store
.TemporaryItems
.Trashes
.apdisk
.fseventsd
EOF

        LOG="$4"
        HISTORY_DIR="`date +"../history/history_%Y%m%d_%H%M%S"`"
        RSYNC_OPTS="-avhb --progress --delete --delete-during --backup-dir=${HISTORY_DIR}"
        EXCLUDE_OPTS="--exclude-from=${BKP_EXCL}"
        echo "Copying MASTER to $3 BACKUP." | tee $LOG
        time rsync ${RSYNC_OPTS} ${EXCLUDE_OPTS} "${MASTER}" "$2" | tee -a $LOG
        rm -f /tmp/backupcatalog.excl
    fi
}

report_bk_dev() {
    if [ -z "$1" ]
    then
        echo "FAILED."
    else
        echo "Found device: [$1]"
    fi
}

# Here starts the portable part of the script.

. "${CONFIG}"

echo "Checking devices."

for MASTER in ${MASTER_DISKS[@]}
do
    echo "Master disk: ${MASTER}"
    MASTER_DEVICE="`get_device "${MASTER}"`"
    MASTER_MOUNT="`get_mountpoint "${MASTER}"`"
    MASTER_RO="`is_readonly ${MASTER_DEVICE}`"

    if [ -z "$MASTER_DEVICE" ]
    then
        echo "No device found for ${MASTER}"
        continue
    fi

    echo "Master device: ${MASTER_DEVICE}"
    echo "Mount point: ${MASTER_MOUNT}"
    echo "Read only : ${MASTER_RO}"

    echo "Searching ${BK1}... "
    BK1_DEV="`get_device "${BK1}"`"
    report_bk_dev "${BK1_DEV}"

    echo "Searching ${BK2}... "
    BK2_DEV="`get_device "${BK2}"`"
    report_bk_dev "${BK2_DEV}"

    USE_BK1='y'
    USE_BK2='y'

    BKDIR=`expr "${MASTER}" : "${MASTER_MOUNT}"'\(.*\)'`
    BKVOLUME=`expr "${MASTER_MOUNT}" : '/Volumes/\(.*\)'`
    BK1_DIR="${BK1}/${BKVOLUME}/${BKDIR}"
    BK2_DIR="${BK2}/${BKVOLUME}/${BKDIR}"

    [ -z "${BK1_DEV}" ] && USE_BK1='n'
    if [ ! -z "${BK1_DEV}" -a "`is_readonly "${BK1_DEV}"`" == "YES" ]
    then
    	echo "Target is read-only: ${BK1}"
    	USE_BK1='n'
    fi

    [ -z "${BK2_DEV}" ] && USE_BK2='n'
    if [ ! -z "${BK2_DEV}" -a "`is_readonly "${BK2_DEV}"`" == "YES" ]
    then
    	echo "Target is read-only: ${BK2}"
    	USE_BK2='n'
    fi

    if [ "${USE_BK1}" == "n" -a "${USE_BK2}" == "n" ]
    then
    	die "No disk available for backup."
    fi

    # make source read-only
    echo "Protecting MASTER by turning it into read-only."
    if [ "${MASTER_RO}" != "YES" ]
    then
    	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master read-only."
    	mount_ro "${MASTER_DEVICE}" || die "Could not make master read-only."
    fi

    [ -d "${MASTER}" ] || die "Can't find master: ${MASTER}"

    check_bk_dir "$USE_BK1" "$BK1_DIR"
    [ "$USE_BK1" == "y" ] && echo "Copying to primary backup: ${BK1_DIR}."

    check_bk_dir "$USE_BK2" "$BK2_DIR"
    [ "$USE_BK2" == "y" ] && echo "Copying to secondary backup: ${BK2_DIR}."

    MASTER_LOG="${LOGDIR}/${DATE}-master.log"

    # perform backup
    echo "Starting backup."
    backup_if_required "${USE_BK1}" "${BK1_DIR}" "PRIMARY" "${MASTER_LOG}"
    backup_if_required "${USE_BK2}" "${BK2_DIR}" "SECONDARY" "${MASTER_LOG}"

    # mark last backup log
    ln -snf "${MASTER_LOG}" "${LOGDIR}/LAST_BACKUP.log"

    # make source read-write again
    if [ "${MASTER_RO}" != "YES" ]
    then
    	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master RW again."
    	mount_rw "${MASTER_DEVICE}" || die "Could not make master RW again."
    fi
done
