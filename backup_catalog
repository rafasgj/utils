#!/bin/sh

CONFIG="${HOME}/.backup/config"
LOGDIR="${HOME}/.backup/logs/"

DATE="`date +"%Y-%m-%d"`"

die() {
	echo "$*"
	echo "Your MASTER might be in read-only mode. Unmount and remount it to get back to normal operation."
	exit 1
}

#
# These functions should be "ported" for different OSes.
# This implementation currently only works on macOS.
#
get_volume_data() {
	DATA=""
	DIR="$1"
	# On Mac OS X, it is expected that disks are mounted on '/Volumes'.
	while [ `echo $DIR | awk 'BEGIN{FS="/"}{print NF;}'` -gt 2 ]
	do
		DATA=`df -P "$DIR" 2>/dev/null | tail -1 | sed "s/  */ /g"`
		if [ -z "${DATA}" ]
		then
			DIR="`dirname "${DIR}"`"
		else
			DIR="/Volumes"
		fi
	done
	echo "${DATA}"
}

get_mountpoint() {
	get_volume_data "$1" | cut -d" " -f6
}

get_device() {
	get_volume_data "$1" | cut -d" " -f1
}

is_readonly() {
	STR="`mount | grep "$1" | grep "read-only"`"
	test -z "${STR}" && echo "NO" || echo "YES"
}

unmount() {
	diskutil unmount "$1"
	return $?
}

mount_ro() {
	diskutil mount readOnly "$1"
	return $?
}

mount_rw() {
	diskutil mount "$1"
	return $?
}

# Here starts the portable part of the script.

. "${CONFIG}"

echo "Checking devices."

MASTER_DEVICE="`get_device "${MASTER}"`"
MASTER_MOUNT="`get_mountpoint "${MASTER}"`"
MASTER_RO="`is_readonly ${MASTER_DEVICE}`"

report_bk_dev() {
    if [ -z "$1" ]
    then
        echo "FAILED."
    else
        echo "Found device: [$1]"
    fi
}

echo "Searching ${BK1}... "
BK1_DEV="`get_device "${BK1}"`"
report_bk_dev ${BK1_DEV}

if [ ! -z ${BK2} ]
echo "Searching ${BK2}... "
BK2_DEV="`get_device "${BK2}"`"
report_bk_dev ${BK2_DEV}

USE_BK1='y'
USE_BK2='y'

[ -z "${BK1_DEV}" ] && USE_BK1='n'
if [ ! -z "${BK1_DEV}" -a "`is_readonly "${BK1_DEV}"`" == "YES" ]
then
	echo "Target is read-only: ${BK1}"
	USE_BK1='n'
fi

[ -z "${BK2_DEV}" ] && USE_BK2='n'
if [ ! -z "${BK2_DEV}" -a "`is_readonly "${BK2_DEV}"`" == "YES" ]
then
	echo "Target is read-only: ${BK2}"
	USE_BK2='n'
fi

if [ "${USE_BK1}" == "n" -a "${USE_BK2}" == "n" ]
then
	die "No disk available for backup."
fi

# make source read-only
echo "Protecting MASTER by turning it into read-only."
if [ "${MASTER_RO}" != "YES" ]
then
	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master read-only."
	mount_ro "${MASTER_DEVICE}" || die "Could not make master read-only."
fi

# check directories

check_bk_dir() {
    if [ "$1" == "y" -a ! -d "$2" ]
    then
        echo "Creating primary backup directory."
        mkdir -p "$2" || echo "Can't find first backup: $2"
    fi
}

[ -d "${MASTER}" ] || die "Can't find master: ${MASTER}"

check_bk_dir "$USE_BK1" "$BK1"
[ "$USE_BK1" == "y" ] && echo "Copying to primary backup."

check_bk_dir "$USE_BK2" "$BK2" 
[ "$USE_BK2" == "y" ] && echo "Copying to secondary backup."

echo "Starting backup."

# do copies
HISTORY_DIR="`date +"../history_%Y%m%d_%H%M%S"`"
RSYNC_OPTS="-avhb --progress --delete --delete-during --backup-dir=${HISTORY_DIR}"
MASTER_LOG="${LOGDIR}/${DATE}-master.log"

if [ "${USE_BK1}" == "y" ]
then
	echo "Copying MASTER to PRIMARY BACKUP." | tee "${LOGDIR}/${DATE}-master.log"
	time rsync ${RSYNC_OPTS} "${MASTER}" "${BK1}" | tee -a "${LOGDIR}/${DATE}-master.log"
	if [ "${USE_BK2}" == "y" ]
	then
		echo "Copying PRIMARY BACKUP to SECONDARY BACKUP." | tee "${LOGDIR}/${DATE}-secondary.log"
		time rsync ${RSYNC_OPTS} "${BK1}" "${BK2}" | tee -a "${LOGDIR}/${DATE}-secondary.log"
	fi
elif [ "${USUE_BK2}" == "y" ]
then
	MASTER_LOG="${LOGDIR}/${DATE}-master-secondary.log"
	echo "Copying MASTER to SECONDARY BACKUP." | tee "${LOGDIR}/${DATE}-master-secondary.log"
	time rsync ${RSYNC_OPTS} "${MASTER}" "${BK2}" | tee -a "${LOGDIR}/${DATE}-master-secondary.log"
fi

# mark last backup log
ln -snf "${MASTER_LOG}" "${LOGDIR}/LAST_BACKUP.log"

# make source read-write again
if [ "${MASTER_RO}" != "YES" ]
then
	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master RW again."
	mount_rw "${MASTER_DEVICE}" || die "Could not make master RW again."
fi

