#!/bin/sh

CONFIG="${HOME}/.backup/config"
LOGDIR="${HOME}/.backup/logs/"

DATE="`date +"%Y-%m-%d"`"

die() {
	echo "$*"
	exit 1
}

#
# These functions should be "ported" for different OSes.
# This implementation currently only works on Mac OS X,
# and I do have some GNU tools installed through Homebrew.
#
get_mountpoint() {
	df -P "$1" | tail -1 | sed "s/  */ /g" | cut -d" " -f6 2>/dev/null
}

get_device() {
	df -P "$1" | tail -1 | sed "s/  */ /g" | cut -d" " -f1 2>/dev/null
}

is_readonly() {
	STR="`mount | grep "$1" | grep "read-only"`"
	test -z "${STR}" && echo "NO" || echo "YES"
}

unmount() {
	diskutil unmount "$1"
	return $?
}

mount_ro() {
	diskutil mount readOnly "$1"
	return $?
}

mount_rw() {
	diskutil mount "$1"
	return $?
}

. "${CONFIG}"

MASTER_DEVICE="`get_device "${MASTER}"`"
MASTER_MOUNT="`get_mountpoint "${MASTER}"`"
MASTER_RO="`is_readonly ${MASTER_DEVICE}`"

BK1_DEV="`get_device "${BK1}"`"
BK2_DEV="`get_device "${BK2}"`"

USE_BK1='y'
USE_BK2='y'
[ -z "${BK1_DEV}" ] && USE_BK1='n'

if [ "`is_readonly "${BK1_DEV}"`" == "YES" ]
then
	echo "Target is read-only: ${BK1}"
	USE_BK1='n'
fi

if [ "`is_readonly "${BK2_DEV}"`" == "YES" ]
then
	echo "Target is read-only: ${BK2}"
	USE_BK2='n'
fi

[ "${USE_BK1}" == "n" -a "${USE_BK2}" == "n" ] && die "No disk available for backup."

# make source read-only
if [ "${MASTER_RO}" != "YES" ]
then
	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master read-only."
	mount_ro "${MASTER_DEVICE}" || die "Could not make master read-only."
fi

# check directories
[ -d "${MASTER}" ] || die "Can't find master: ${MASTER}"
if [ "${USE_BK1}" == "y" -a ! -d "${BK1}" ]
then
	echo "Creating primary backup directory."
	mkdir -p "${BK1}" || echo "Can't find first backup: ${BK1}"
fi
if [ "${USE_BK2}" == "y" -a ! -d "${BK2}" ]
then
	echo "Creating secondary backup directory."
	mkdir -p "${BK2}" || echo "Can't find secondary backup: ${BK2}"
fi

echo "Starting backup."

# do copies
HISTORY_DIR="`date +'../history_%Y%m%d_%H%M%S'`"
RSYNC_OPTS="-avzhWb --progress --delete --backup-dir='${HISTORY_DIR}' "
MASTER_LOG="${LOGDIR}/${DATE}-master.log"

if [ "${USE_BK1}" == "y" ]
then
	echo "Copying MASTER to PRIMARY BACKUP." | tee "${LOGDIR}/${DATE}-master.log"
	time rsync ${RSYNC_OPTS} "${MASTER}" "${BK1}" | tee -a "${LOGDIR}/${DATE}-master.log"
	if [ "${USE_BK2}" == "y" ]
	then
		echo "Copying PRIMARY BACKUP to SECONDARY BACKUP." | tee "${LOGDIR}/${DATE}-secondary.log"
		time rsync ${RSYNC_OPTS} "${BK1}" "${BK2}" | tee -a "${LOGDIR}/${DATE}-secondary.log"
	fi
elif [ "${USUE_BK2}" == "y" ]
then
	MASTER_LOG="${LOGDIR}/${DATE}-master-secondary.log"
	echo "Copying MASTER to SECONDARY BACKUP." | tee "${LOGDIR}/${DATE}-master-secondary.log"
	time rsync ${RSYNC_OPTS} "${MASTER}" "${BK2}" | tee -a "${LOGDIR}/${DATE}-master-secondary.log"
fi

# mark last backup log
ln -snf "${MASTER_LOG}" "${LOGDIR}/LAST_BACKUP.log"

# make source read-write again
if [ "${MASTER_RO}" != "YES" ]
then
	unmount "${MASTER_DEVICE}" || die "Error unmounting master. Could not make master RW again."
	mount_rw "${MASTER_DEVICE}" || die "Could not make master RW again."
fi

